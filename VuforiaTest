
package org.firstinspires.ftc.teamcode;

import com.qualcomm.robotcore.eventloop.opmode.Autonomous;
import org.firstinspires.ftc.robotcore.external.tfod.TFObjectDetector;
import com.qualcomm.robotcore.hardware.Servo;
import com.qualcomm.robotcore.robot.RobotState;
import com.qualcomm.robotcore.eventloop.opmode.LinearOpMode;
import com.qualcomm.robotcore.eventloop.opmode.Autonomous;
import com.qualcomm.robotcore.hardware.DcMotor;
import com.vuforia.Vuforia;

import org.firstinspires.ftc.robotcore.external.ClassFactory;
import org.firstinspires.ftc.robotcore.external.navigation.VuforiaLocalizer;
import org.firstinspires.ftc.robotcore.external.navigation.VuforiaLocalizer.CameraDirection;
import org.firstinspires.ftc.robotcore.external.navigation.VuforiaTrackable;
import org.firstinspires.ftc.robotcore.external.navigation.VuforiaTrackableDefaultListener;
import org.firstinspires.ftc.robotcore.external.navigation.VuforiaTrackables;
import org.firstinspires.ftc.robotcore.external.matrices.OpenGLMatrix;
import org.firstinspires.ftc.robotcore.external.matrices.VectorF;
import org.firstinspires.ftc.robotcore.external.navigation.Orientation;

import java.util.ArrayList;
import java.util.List;
import java.util.Arrays;

import static org.firstinspires.ftc.robotcore.external.navigation.AngleUnit.DEGREES;
import static org.firstinspires.ftc.robotcore.external.navigation.AxesOrder.XYZ;
import static org.firstinspires.ftc.robotcore.external.navigation.AxesOrder.YZX;
import static org.firstinspires.ftc.robotcore.external.navigation.AxesReference.EXTRINSIC;

// I don't understand why this is necessary
import static org.firstinspires.ftc.teamcode.VuforiaTest.RobotState.DONE;
import static org.firstinspires.ftc.teamcode.VuforiaTest.RobotState.MOVE_STONE;
import static org.firstinspires.ftc.teamcode.VuforiaTest.RobotState.TARGET_STONE;
import static org.firstinspires.ftc.teamcode.VuforiaTest.RobotState.TEST;
import static org.firstinspires.ftc.teamcode.VuforiaTest.RobotState.ERROR;

@Autonomous
//@Disabled
public class VuforiaTest extends LinearOpMode {

    /****************************** constants **************************/
    /****************************** constants **************************/

    private static final String TFOD_MODEL_ASSET     = "Skystone.tflite";
    private static final String LABEL_SKYSTONE   = "Skystone";
    private static final String LABEL_PLATFORM = "Platform";

    private static final int SCREEN_WIDTH        = 1280;
    private static final int SCREEN_HEIGHT       =  720;
    private static final int POINTING_TOLERANCE  =   50;

    private static final double LOW_POWER        = 0.15;
    private static final double SPEED        = 0.75;
    private static final int CLICKS_TO_TARGET    =  5000;

    private static final int COUNTS_PER_ROTATION = 1680;
    private static final int COUNTS_PER_MOTOR_REV = 1680;
    static final double     DRIVE_GEAR_REDUCTION    = 1.0;
    static final double     WHEEL_DIAMETER_INCHES   = 4.0;
    private static final double COUNTS_PER_INCH  = (COUNTS_PER_MOTOR_REV * DRIVE_GEAR_REDUCTION) / (WHEEL_DIAMETER_INCHES * 3.1415);



    public enum RobotState {
        TARGET_STONE,
        MOVE_STONE,
        DONE,
        TEST,
        ERROR,
    }
    
    private static final VuforiaLocalizer.CameraDirection CAMERA_CHOICE = BACK;

    // This Vuforia key 
    private static final String VUFORIA_KEY = "AX4M/dD/////AAABmUcl5rwrykPPpKQ5zGFa4i4Mt6RmvlkzAWjZ99prH3RkdPikfcTNKFpbQGxVbBIel351SzwQEWfbmvOe/llFF2UlXs8RiUvyQVJM0MuP0LXyPWMgh0uBiltCUHbSvlCtJZRGUNbonluWFeGxr+0gMXqcww10l+rD5hGZc8V6OnzJCyihEhkRCKs/LcS8bDap3Z6hGwoaGbxtyNXzTJY9pL+KsK9qBOG6mhKb7bu8xulebK5qy5j+0Wuc1lkExsLBa4eHgUYS1rtEIuabhCnE4/QBObTCZR/rfMOQ0BGKBOg4b6x2lavidOBkG+glccve7/1SV/gdAksgO0Sw+XUYT3qOOINQKtxjZfn7LLWjqzaW";
    
    private static final float mmPerInch        = 25.4f;
    private static final float mmTargetHeight   = (6) * mmPerInch;          // the height of the center of the target image above the floor

    // Constant for Stone Target
    private static final float stoneZ = 2.00f * mmPerInch;
    
    /****************************** member variables *******************/
    /****************************** member variables *******************/

    // Stores the apps execution state
    // private RobotState myRobotState = TEST;
    private RobotState myRobotState = TARGET_STONE;

    // The Vuforia localization engine.
    private VuforiaLocalizer myVuforia = null;
    
    // Class Members
    private OpenGLMatrix lastLocation = null;
    private VuforiaLocalizer vuforia = null;
    private boolean targetVisible = false;
    private float phoneXRotate    = 0;
    private float phoneYRotate    = 0;
    private float phoneZRotate    = 0;

    // The Tensor Flow Object Detection engine.
    private TFObjectDetector myTfod = null;

    // links to the physical robot driver motors
    private DcMotor left = null;
    private DcMotor right = null;
    private DcMotor front = null;
    private DcMotor back = null;
    
    private DcMotor claw = null;
    private DcMotor lift = null;
    private Servo leftServo = null;
    private Servo rightServo = null;


    /****************************** runOpMode **************************/
    /****************************** runOpMode **************************/
    /****************************** runOpMode **************************/
    // The robot execution loop and state machine
    @Override
    public void runOpMode() {

        initRobot();

        /** Wait for the game to begin */
        telemetry.addData(">", "Press Play to start tracking");
        telemetry.update();
        waitForStart();

        // Main Linear OpMod
        while (opModeIsActive()) {

            switch (myRobotState) {
                case TARGET_STONE:
                    targetStone();
                    break;
                case MOVE_STONE:
                    encoderDrive(SPEED, 0, 0, 5, 5);
                    moveToStone();
                    break;
                case DONE:
                    shutdown();
                    break;
                case TEST:
                    encoderDrive(SPEED, 0, 0, 15, 15);
                    myRobotState = DONE;
                    break;
                case ERROR:
                    myRobotState = DONE;
                    break;
                default: {
                    telemetry.addData("Error", "This program should never be here");
                    myRobotState = ERROR;
                }
            }
        }
    }

    //****************************** initRobot **************************
    //****************************** initRobot **************************
    // Initialize the Vuforia Localization Engine, TensorFlow Object Detection, and motors.
    // Vuforia is required for the cameras

    private void initRobot() {

        initVuforia();

        if (myRobotState != ERROR) {
            cameraStuff();
        }

        if (myRobotState != ERROR) {
            initMotors();
        }
        // Tell the driver that initialization is complete.
        telemetry.addData("Status", "Initialized");
    }

    // ********** initVuforia helper
    // Configure Vuforia by creating a Parameter object, and passing it to the Vuforia engine.
    // Configure the phone to use the rear camera.

    private void initVuforia() {
    
    int cameraMonitorViewId = hardwareMap.appContext.getResources().getIdentifier("cameraMonitorViewId", "id", hardwareMap.appContext.getPackageName());
  
        VuforiaLocalizer.Parameters parameters = new VuforiaLocalizer.Parameters();
        
        parameters.vuforiaLicenseKey = VUFORIA_KEY;
        parameters.cameraDirection = CameraDirection.BACK;

        //  Instantiate the Vuforia engine
        myVuforia = ClassFactory.getInstance().createVuforia(parameters);
        
        VuforiaTrackables targetsSkyStone = this.vuforia.loadTrackablesFromAsset("Skystone");

        VuforiaTrackable stoneTarget = targetsSkyStone.get(0);
        stoneTarget.setName("Stone Target");

        if (myVuforia == null){
            myRobotState = ERROR;
            telemetry.addData("ERROR", "the Vuforia engine did not initialize");
        }
        
        phoneYRotate = -90;
        phoneXRotate = 90;
        
        
        

    }

    // Initialize the camera stuff.
    private void cameraStuff(){
        phoneYRotate = -90;
        phoneXRotate = 90;
        
        
        final float CAMERA_FORWARD_DISPLACEMENT  = 4.0f * mmPerInch;   // eg: Camera is 4 Inches in front of robot center
        final float CAMERA_VERTICAL_DISPLACEMENT = 8.0f * mmPerInch;   // eg: Camera is 8 Inches above ground
        final float CAMERA_LEFT_DISPLACEMENT     = 0;     // eg: Camera is ON the robot's center line
        
        OpenGLMatrix robotFromCamera = OpenGLMatrix
                    .translation(CAMERA_FORWARD_DISPLACEMENT, CAMERA_LEFT_DISPLACEMENT, CAMERA_VERTICAL_DISPLACEMENT)
                    .multiplied(Orientation.getRotationMatrix(EXTRINSIC, YZX, DEGREES, phoneYRotate, phoneZRotate, phoneXRotate));

        //  Let all the trackable listeners know where the phone is.  
        ((VuforiaTrackableDefaultListener) trackable.getListener()).setPhoneInformation(robotFromCamera, parameters.cameraDirection);
    }
    

    // ********** initMotors helper
    //Initialize the drive motors.

    private void initMotors () {

        // Set up drive motors
        left = hardwareMap.get(DcMotor.class, "L");
        right = hardwareMap.get(DcMotor.class, "R");
        front = hardwareMap.get(DcMotor.class, "F");
        back = hardwareMap.get(DcMotor.class, "B");
        
        claw = hardwareMap.get(DcMotor.class, "C");
        lift = hardwareMap.get(DcMotor.class, "S");
        leftServo = hardwareMap.get(Servo.class, "LS");
        rightServo = hardwareMap.get(Servo.class, "RS");
        
        left.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
        right.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
        front.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
        back.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);

        left.setMode(DcMotor.RunMode.RUN_USING_ENCODER);
        right.setMode(DcMotor.RunMode.RUN_USING_ENCODER);
        front.setMode(DcMotor.RunMode.RUN_USING_ENCODER);
        back.setMode(DcMotor.RunMode.RUN_USING_ENCODER);
        
        leftServo.setPosition(0.0);
        rightServo.setPosition(1.0);
    }

    //****************************** targetGold *************************
    //****************************** targetGold  ************************
    // Turn the robot to face the gold mineral
    private boolean[] targetStone () {
        targetsSkyStone.activate();
        boolean left = false;
        boolean mid = false;
        boolean right = false;
        
        while (!isStopRequested()) {

            // check all the trackable targets to see which one (if any) is visible.
            
             if (((VuforiaTrackableDefaultListener)trackable.getListener()).isVisible()) {
                    telemetry.addData("Visible Target", trackable.getName());
                    targetVisible = true;

                    // getUpdatedRobotLocation() will return null if no new information is available since
                    // the last time that call was made, or if the trackable is not currently visible.
                    OpenGLMatrix robotLocationTransform = ((VuforiaTrackableDefaultListener)trackable.getListener()).getUpdatedRobotLocation();
                    if (robotLocationTransform != null) {
                        lastLocation = robotLocationTransform;
                    }
                    break;
                
               }

            // Provide feedback as to where the robot is located (if we know).
            if (targetVisible) {
                // express position (translation) of robot in inches.
                VectorF translation = lastLocation.getTranslation();
                telemetry.addData("Pos (in)", "{X, Y, Z} = %.1f, %.1f, %.1f",
                        translation.get(0) / mmPerInch, translation.get(1) / mmPerInch, translation.get(2) / mmPerInch);

                // express the rotation of the robot in degrees.
                Orientation rotation = Orientation.getOrientation(lastLocation, EXTRINSIC, XYZ, DEGREES);
                telemetry.addData("Rot (deg)", "{Roll, Pitch, Heading} = %.0f, %.0f, %.0f", rotation.firstAngle, rotation.secondAngle, rotation.thirdAngle);
                
                if (stone != null) {
                int goldMineralLeftX = (int) stone.getLeft();
                int goldMineralRightX = (int) stone.getRight();
                int goldMineralCenterX = (goldMineralLeftX + goldMineralRightX) / 2;
                int error = goldMineralCenterX - SCREEN_WIDTH / 2; 
                // don't know whether to add or subtract the ofset value of camera.

                if (Math.abs(error) < POINTING_TOLERANCE) {
                    myRobotState = MOVE_STONE;
                    mid = true;
                } 
                else {
                    telemetry.addData("Action: ", "Move " + error);
                    telemetry.update();
                    int turn_clicks = error / 8;
                    
                    if(turn_clicks > 0 ){
                        left = true;
                    }
                    else{
                        right = true;
                    }
                    
                    encoderDrive(SPEED, 0, 0, turn_clicks, turn_clicks);
                }
     
            }
            else {
                telemetry.addData("Visible Target", "none");
            }
            telemetry.update();
        }

        }
        // Disable Tracking when we are done;
        targetsSkyStone.deactivate();
        
        return new boolean[] {left,mid,right};
    }

    /****************************** moveToGold *************************/
    /****************************** moveToGold *************************/
    // Move forward CLICKS_TO_TARGET
    private void moveToStone(){
        telemetry.addData("State: ", "Moving to Gold");
        telemetry.update();

        encoderDrive(SPEED, 15, 15, 0, 0);

        myRobotState = DONE;
    }

    // ********** moveFor helper
    // Turn each motor for a given number of counts
    //    leftCount:  the number of counts and direction to turn the left wheel
    //    rightCount:                                                right wheel
    // if the leftCount is less than the right count the robot will turn left
    // if the rightCount is less than the left count the robot will turn right

    public void encoderDrive(double speed, double leftInches, double rightInches, double frontInches, double backInches) {
        int newLeftTarget;
        int newRightTarget;
        int newFrontTarget;
        int newBackTarget;
        
        
        // Ensure that the opmode is still active
        if (opModeIsActive()) {

            // Determine new target position, and pass to motor controller
            newLeftTarget = left.getCurrentPosition() + (int)(leftInches * COUNTS_PER_INCH);
            newRightTarget = right.getCurrentPosition() + (int)(rightInches * COUNTS_PER_INCH);
            newBackTarget = back.getCurrentPosition() + (int)(backInches * COUNTS_PER_INCH);
            newFrontTarget = front.getCurrentPosition() + (int)(frontInches * COUNTS_PER_INCH);

            left.setTargetPosition(newLeftTarget);
            right.setTargetPosition(newRightTarget);
            front.setTargetPosition(newFrontTarget);
            back.setTargetPosition(newBackTarget);

            // Turn On RUN_TO_POSITION
            left.setMode(DcMotor.RunMode.RUN_TO_POSITION);
            right.setMode(DcMotor.RunMode.RUN_TO_POSITION);
            front.setMode(DcMotor.RunMode.RUN_TO_POSITION);
            back.setMode(DcMotor.RunMode.RUN_TO_POSITION);

            // reset the timeout time and start motion.

            left.setPower(Math.abs(speed));
            right.setPower(Math.abs(speed));
            front.setPower(Math.abs(speed));
            back.setPower(Math.abs(speed));

            // keep looping while we are still active, and there is time left, and both motors are running.
            // Note: We use (isBusy() && isBusy()) in the loop test, which means that when EITHER motor hits
            // its target position, the motion will stop.  This is "safer" in the event that the robot will
            // always end the motion as soon as possible.
            // However, if you require that BOTH motors have finished their moves before the robot continues
            // onto the next step, use (isBusy() || isBusy()) in the loop test.
            while (opModeIsActive() &&

                    (left.isBusy() || right.isBusy() || front.isBusy() || back.isBusy())) {

                // Display it for the driver.
                telemetry.addData("Path1",  "Running to %7d :%7d :%7d: %7d", newLeftTarget,  newRightTarget, newFrontTarget, newBackTarget);
                telemetry.addData("Path2",  "Running at %7d :%7d :%7d: %7d",
                        left.getCurrentPosition(),
                        right.getCurrentPosition(),
                        front.getCurrentPosition(),
                        back.getCurrentPosition());
                telemetry.update();
            }

            // Stop all motion;
            left.setPower(0);
            right.setPower(0);
            front.setPower(0);
            back.setPower(0);

            // Turn off RUN_TO_POSITION
            left.setMode(DcMotor.RunMode.RUN_USING_ENCODER);
            right.setMode(DcMotor.RunMode.RUN_USING_ENCODER);
            front.setMode(DcMotor.RunMode.RUN_USING_ENCODER);
            back.setMode(DcMotor.RunMode.RUN_USING_ENCODER);

            //  sleep(250);   // optional pause after each move
        }

    }


    /****************************** oneRotation ************************/
    /****************************** oneRotation *************************/
    // one rotation clockwise
   /* private void oneRotation(){
        telemetry.addData("State: ", "Test oneRotation");
        telemetry.update();

        // reset encoder count kept by motors.
        myLeftMotor.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
        myRightMotor.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);

        // set motors to run to target encoder position and stop with brakes on.
        myLeftMotor.setTargetPosition(COUNTS_PER_ROTATION);
        myRightMotor.setTargetPosition(-COUNTS_PER_ROTATION);
        myLeftMotor.setMode(DcMotor.RunMode.RUN_TO_POSITION);
        myRightMotor.setMode(DcMotor.RunMode.RUN_TO_POSITION);
        myLeftMotor.setPower(MID_SPEED);
        myRightMotor.setPower(MID_SPEED);

        while (opModeIsActive() && (myLeftMotor.isBusy() || myRightMotor.isBusy())) {
            idle();
        }

        myRobotState = DONE;
    }
*/
    /****************************** shutdown ***************************/
    /****************************** shutdown ***************************/
    // Turn the motor power off and shutdown the TensorFlow Object Detection Engine
    public void shutdown()
    {
        telemetry.addData("State: ", "Done");

        left.setPower(0.0);
        right.setPower(0.0);
        front.setPower(0.0);
        back.setPower(0.0);

        if (myTfod != null)
        {
            myTfod.shutdown();
        }

        telemetry.update();
    }
}

